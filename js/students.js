// Students table management
console.log('üë®‚Äçüéì students.js loaded');

window.loadStudentsForCourse = async function(courseId, courseData = null) {
    try {
        console.log(`üë®‚Äçüéì Loading students for course: ${courseId}`, courseData);
        showStudentsLoading();
        
        // RESET currentStudents
        window.currentStudents = [];
        
        // ‚úÖ L·∫§Y M√É H·∫†NG T·ª™ COURSE DATA
        let maHang = null;
        if (courseData && courseData.ma_hang) {
            maHang = courseData.ma_hang;
            window.currentCourseMaHang = maHang;
            console.log(`üéØ Set currentCourseMaHang: ${maHang}`);
        } else {
            // Fallback: try to get from courseId or global variable
            maHang = window.currentCourseMaHang || getMaHangFromCourseId(courseId);
            console.log(`üîç MaHang fallback: ${maHang}`);
        }
        
        let lmsStudents = [];
        let jiraStudents = [];
        
        try {
            console.log(`üì• Loading from LMS Excel...`);
            lmsStudents = await ApiService.fetchLmsExcel(courseId);
            console.log(`‚úÖ Loaded ${lmsStudents?.length || 0} students from LMS Excel`);
        } catch (lmsError) {
            console.log(`‚ùå LMS Excel failed: ${lmsError.message}`);
            lmsStudents = [];
        }
        
        try {
            console.log(`üì• Loading from JIRA...`);
            jiraStudents = await ApiService.fetchStudents(courseId);
            console.log(`‚úÖ Loaded ${jiraStudents?.length || 0} students from JIRA`);
        } catch (jiraError) {
            console.log(`‚ùå JIRA failed: ${jiraError.message}`);
            jiraStudents = [];
        }
        
        // ‚úÖ ƒê·∫¢M B·∫¢O C·∫¢ HAI ƒê·ªÄU L√Ä ARRAY
        if (!Array.isArray(lmsStudents)) {
            console.warn('‚ö†Ô∏è lmsStudents kh√¥ng ph·∫£i array, converting to empty array');
            lmsStudents = [];
        }
        if (!Array.isArray(jiraStudents)) {
            console.warn('‚ö†Ô∏è jiraStudents kh√¥ng ph·∫£i array, converting to empty array');
            jiraStudents = [];
        }
        
        // MERGE DATA
        let mergedStudents = await mergeStudentData(lmsStudents, jiraStudents);
        
        // ‚úÖ VALIDATE MERGED DATA
        if (!mergedStudents || !Array.isArray(mergedStudents)) {
            console.error('‚ùå mergedStudents kh√¥ng ph·∫£i array:', mergedStudents);
            mergedStudents = [];
        }
        
        console.log(`üîÑ Merged ${mergedStudents.length} students total`);
        
        if (mergedStudents.length === 0) {
            const errorMsg = 'Kh√¥ng c√≥ d·ªØ li·ªáu h·ªçc vi√™n t·ª´ c·∫£ LMS v√† JIRA';
            console.log(`‚ùå ${errorMsg}`);
            showStudentsError(errorMsg);
            updateStudentsCount(0);
            
            // ‚úÖ X·ª¨ L√ù KHI KH√îNG C√ì D·ªÆ LI·ªÜU - KH√îNG G·ªåI excelExport
            disableExportButton();
            
            // üéØ QUAN TR·ªåNG: ·∫®N LOADING KHI KH√îNG C√ì D·ªÆ LI·ªÜU
            hideStudentsLoading();
            return;
        }
        
        window.currentStudents = mergedStudents;
        
        // ‚úÖ K√çCH HO·∫†T N√öT EXPORT KHI C√ì D·ªÆ LI·ªÜU - D√ôNG FUNCTION AN TO√ÄN
        enableExportButton();
        
        await populateStudentsTable(mergedStudents, maHang);
        updateStudentsCount(mergedStudents.length);
        
        // üéØ QUAN TR·ªåNG: ·∫®N LOADING SAU KHI HO√ÄN T·∫§T
        hideStudentsLoading();
        
    } catch (error) {
        console.error('üí• L·ªói t·∫£i h·ªçc vi√™n:', error);
        showStudentsError('L·ªói h·ªá th·ªëng: ' + error.message);
        updateStudentsCount(0);
        
        // ‚úÖ DISABLE EXPORT KHI C√ì L·ªñI - D√ôNG FUNCTION AN TO√ÄN
        disableExportButton();
        
        // üéØ QUAN TR·ªåNG: ·∫®N LOADING KHI C√ì L·ªñI
        hideStudentsLoading();
    }
};
    function showStudentsLoading() {
        GlobalUtils.showLoading('#studentsTableBody');
    }

    function hideStudentsLoading() {
        GlobalUtils.hideLoading();
    }

    function enableExportButton() {
        GlobalUtils.enableExportButton();
    }

    function disableExportButton() {
        GlobalUtils.disableExportButton();
    }

// H√ÄM MERGE DATA - QUAN TR·ªåNG!
async function mergeStudentData(lmsStudents, jiraStudents) {
    console.log('üîÑ Merging student data from multiple sources...');
    
    // ƒê·∫£m b·∫£o l√† array
    if (!lmsStudents || !Array.isArray(lmsStudents)) {
        console.error('‚ùå lmsStudents kh√¥ng ph·∫£i array:', lmsStudents);
        lmsStudents = [];
    }
    if (!jiraStudents || !Array.isArray(jiraStudents)) {
        console.error('‚ùå jiraStudents kh√¥ng ph·∫£i array:', jiraStudents);
        jiraStudents = [];
    }
    
    // L·∫•y danh s√°ch ma_dk ƒë·ªÉ query scores
    const maDkList = lmsStudents.map(s => s.ma_dk).filter(ma_dk => ma_dk);
    console.log(`üìã Fetching scores for ${maDkList.length} students`);
    
    // L·∫•y scores t·ª´ DB
    let scoresMap = {};
    if (maDkList.length > 0) {
        try {
            const response = await fetch('/api/scores/bulk', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ ma_dk_list: maDkList })
            });
            
            const result = await response.json();
            if (result.success) {
                scoresMap = result.scores || {};
                console.log(`‚úÖ Loaded scores for ${Object.keys(scoresMap).length} students`);
            } else {
                console.log('‚ùå Scores API returned failure');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Could not load scores, continuing without...', error.message);
        }
    }
    
    // Merge 3 ngu·ªìn data
    const merged = lmsStudents.map(lmsStudent => {
        const ma_dk = lmsStudent.ma_dk;
        
        const jiraStudent = jiraStudents.find(j => j.ma_dk === ma_dk) || {};
        const scoreData = scoresMap[ma_dk] || {};
        
        const mergedStudent = {
            ...lmsStudent,
            ...jiraStudent,
            ...scoreData // Th√™m scores data
        };
        
        return mergedStudent;
    });
    
    console.log(`üéØ Final merged: ${merged.length} students with scores data`);
    return merged;
}

// ==================== STUDENT ROW TEMPLATE ====================

async function createStudentRowHTML(student, index, maHang = null) {
    const so_tt = student.so_tt || index + 1;
    const ma_dk = (student.ma_dk || `hv${String(index + 1).padStart(3, '0')}`).toLowerCase();
    
    let ho_va_ten = student.ho_va_ten || 'N/A';
    if (ho_va_ten.length > 25) {
        ho_va_ten = ho_va_ten.substring(0, 25) + '...';
    }
    
    // ‚úÖ L·∫§Y STANDARDS ƒê·ªÇ KI·ªÇM TRA M√îN N√ÄO KH√îNG √ÅP D·ª§NG
    const standards = maHang ? await getNewStandardsByMaHang(maHang) : null;
    const complianceResult = window.studentComplianceResults?.[student.ma_dk] || { violations: {} };
    const violations = complianceResult.violations;
    
    // Data t·ª´ JIRA (th·ª±c h√†nh) - convert to hours/km
    const outdoor_hour = student.outdoor_hour ? (student.outdoor_hour / 3600).toFixed(2) : '0';
    const outdoor_distance = student.outdoor_distance ? (student.outdoor_distance / 1000).toFixed(2) : '0';
    const night_duration = student.night_duration ? (student.night_duration / 3600).toFixed(2) : '0';
    const auto_duration = student.auto_duration ? (student.auto_duration / 3600).toFixed(2) : '0';
    
    // Data t·ª´ LMS Excel (l√Ω thuy·∫øt)
    const phap_luat = student.phap_luat || student['Ph√°p lu·∫≠t giao th√¥ng ƒë∆∞·ªùng b·ªô'] || 0;
    const dao_duc = student.dao_duc || student['ƒê·∫°o ƒë·ª©c ng∆∞·ªùi l√°i xe'] || 0;
    const cau_tao_oto = student.cau_tao_oto || student['C·∫•u t·∫°o v√† s·ª≠a ch·ªØa'] || 0;
    const ky_thuat_lai = student.ky_thuat_lai || student['K·ªπ thu·∫≠t l√°i xe'] || 0;
    const nang_hang = student.nang_hang || student['N√¢ng h·∫°ng'] || 0;
    const mo_phong = student.mo_phong || student['M√¥ ph·ªèng'] || 0;
    
    // Data t·ª´ Scores Import (Cabin & Ki·ªÉm tra)
    const cabin_gio = student.cabin_gio || 0;
    const cabin_bai = student.cabin_bai || 0;
    const kt_lythuyet = student.kt_lythuyet || 0;
    const kt_mophong = student.kt_mophong || 0;
    const kt_thuchanh = student.kt_thuchanh || 0;
    const kt_hoanthanh = student.kt_hoanthanh || 'Ch∆∞a';
    
    // ‚úÖ FUNCTION T·∫†O CELL M·ªöI - X·ª¨ L√ù M√îN KH√îNG √ÅP D·ª§NG
    const createCell = (value, isViolation, fieldName = null, isPercent = false) => {
        // Ki·ªÉm tra n·∫øu m√¥n kh√¥ng √°p d·ª•ng (required: false)
        const isNotApplicable = standards && fieldName && 
                               getFieldStandard(standards, fieldName)?.required === false;
        
        if (isNotApplicable) {
            return `<td style="background: #f8f9fa; color: #6c757d; font-style: italic;">N/A</td>`;
        }
        
        const displayValue = isPercent ? value : value;
        const style = isViolation ? 'style="color: #e74c3c; font-weight: bold;"' : '';
        return `<td ${style}>${displayValue}</td>`;
    };

    // ‚úÖ FUNCTION PH·ª§ ƒê·ªÇ L·∫§Y STANDARD THEO FIELD NAME
    const getFieldStandard = (standards, fieldName) => {
        if (fieldName.startsWith('cabin_')) {
            const key = fieldName.replace('cabin_', '');
            return standards.cabin?.[key];
        } else if (fieldName.startsWith('kt_')) {
            const key = fieldName.replace('kt_', '');
            return standards.kiem_tra?.[key];
        } else if (['outdoor_hour', 'outdoor_distance', 'night_duration', 'auto_duration'].includes(fieldName)) {
            const mapping = {
                'outdoor_hour': 'gio',
                'outdoor_distance': 'km', 
                'night_duration': 'dem',
                'auto_duration': 'tu_dong'
            };
            return standards.thuc_hanh?.[mapping[fieldName]];
        } else {
            return standards.ly_thuyet?.[fieldName];
        }
    };
    
    return `
        <td>${so_tt}</td>
        <td>${ma_dk}</td>
        <td title="${student.ho_va_ten || 'N/A'}">${ho_va_ten}</td>
        
        <!-- Gi·ªù h·ªçc l√Ω thuy·∫øt - T·ª™ LMS EXCEL -->
        ${createCell(phap_luat, violations.phap_luat, 'phap_luat', true)}
        ${createCell(dao_duc, violations.dao_duc, 'dao_duc', true)}
        ${createCell(cau_tao_oto, violations.cau_tao_oto, 'cau_tao_oto', true)}
        ${createCell(ky_thuat_lai, violations.ky_thuat_lai, 'ky_thuat_lai', true)}
        ${createCell(nang_hang, violations.nang_hang, 'nang_hang', true)}
        ${createCell(mo_phong, violations.mo_phong, 'mo_phong', true)}
        
        <!-- Cabin ƒëi·ªán t·ª≠ - T·ª™ SCORES IMPORT -->
        ${createCell(cabin_gio, violations.cabin_gio, 'cabin_gio')}
        ${createCell(cabin_bai, violations.cabin_bai, 'cabin_bai')}
        
        <!-- Th·ª±c h√†nh l√°i xe - T·ª™ JIRA -->
        ${createCell(outdoor_hour, violations.outdoor_hour, 'outdoor_hour')}
        ${createCell(outdoor_distance, violations.outdoor_distance, 'outdoor_distance')}
        ${createCell(night_duration, violations.night_duration, 'night_duration')}
        ${createCell(auto_duration, violations.auto_duration, 'auto_duration')}
        
        <!-- Ki·ªÉm tra cu·ªëi kh√≥a - T·ª™ SCORES IMPORT -->
        ${createCell(kt_lythuyet, violations.kt_lythuyet, 'kt_lythuyet')}
        ${createCell(kt_mophong, violations.kt_mophong, 'kt_mophong')}
        ${createCell(kt_thuchanh, violations.kt_thuchanh, 'kt_thuchanh')}
        <td>${kt_hoanthanh}</td>
    `;
}
// ==================== TABLE POPULATION ====================
async function populateStudentsTable(students, maHang = null) {
    const tbody = document.getElementById('studentsTableBody');
    const cardsContainer = document.getElementById('cardsContainer');
    
    if (!tbody || !cardsContainer) {
        console.error('‚ùå Kh√¥ng t√¨m th·∫•y studentsTableBody ho·∫∑c cardsContainer');
        return;
    }
    
    // VALIDATE students l√† array
    if (!students || !Array.isArray(students)) {
        console.error('‚ùå Students data kh√¥ng h·ª£p l·ªá:', students);
        tbody.innerHTML = getEmptyStateHTML('L·ªói d·ªØ li·ªáu h·ªçc vi√™n', 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá - vui l√≤ng th·ª≠ l·∫°i');
        cardsContainer.innerHTML = getEmptyStateHTML('L·ªói d·ªØ li·ªáu h·ªçc vi√™n', 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá - vui l√≤ng th·ª≠ l·∫°i');
        return;
    }
    
    console.log(`üìã Populating table with ${students.length} students, maHang: ${maHang}`);
    
    if (students.length === 0) {
        tbody.innerHTML = getEmptyStateHTML('Kh√¥ng c√≥ h·ªçc vi√™n', 'Kh√¥ng c√≥ h·ªçc vi√™n n√†o trong kh√≥a h·ªçc n√†y');
        cardsContainer.innerHTML = getEmptyStateHTML('Kh√¥ng c√≥ h·ªçc vi√™n', 'Kh√¥ng c√≥ h·ªçc vi√™n n√†o trong kh√≥a h·ªçc n√†y');
        
        // Reset th·ªëng k√™
        updateProgressStats(0, 0, 0, 0, 0);
        return;
    }
    
    // X√≥a n·ªôi dung c≈©
    tbody.innerHTML = '';
    cardsContainer.innerHTML = '';
    
    // ‚úÖ T√çNH TO√ÅN COMPLIANCE V√Ä TH·ªêNG K√ä
    window.studentComplianceResults = {};
    let stats = {
        theory: 0,
        cabin: 0, 
        practice: 0,
        test: 0,
        total: students.length
    };

    // T√≠nh compliance cho t·∫•t c·∫£ h·ªçc vi√™n
    for (let student of students) {
        try {
            if (!student || !student.ma_dk) {
                console.log('‚ö†Ô∏è Skip invalid student:', student);
                continue;
            }
            
            const complianceResult = maHang ? await checkNewStandardCompliance(student, maHang) : { violations: {}, completedSections: {} };
            window.studentComplianceResults[student.ma_dk] = complianceResult;
            
            // ƒê·∫øm th·ªëng k√™
            const completed = complianceResult.completedSections || {};
            if (completed.theory) stats.theory++;
            if (completed.cabin) stats.cabin++;
            if (completed.practice) stats.practice++;
            if (completed.test) stats.test++;
        } catch (error) {
            console.error(`üí• Error processing student ${student.ma_dk}:`, error);
        }
    }
    
    // ‚úÖ HI·ªÜN TH·ªä TH·ªêNG K√ä
    updateProgressStats(stats.total, stats.theory, stats.cabin, stats.practice, stats.test);
    
    // ‚úÖ T·∫†O TABLE ROWS V√Ä CARDS
    for (let index = 0; index < students.length; index++) {
        const student = students[index];
        try {
            // Table row
            const row = document.createElement('tr');
            row.innerHTML = await createStudentRowHTML(student, index, maHang);
            tbody.appendChild(row);
            
            // Card element
            const card = document.createElement('div');
            card.className = 'student-card';
            card.innerHTML = await createStudentCardHTML(student, index, maHang);
            cardsContainer.appendChild(card);
        } catch (error) {
            console.error(`üí• Error creating row/card for student ${student.ma_dk}:`, error);
        }
    }
    
    console.log('‚úÖ Table and Cards populated with compliance checking');
    window.currentCourseStats = stats;
    
    // √Åp d·ª•ng view mode ngay l·∫≠p t·ª©c
    toggleTableView();
}

// TH√äM H√ÄM M·ªöI ƒê·ªÇ C·∫¨P NH·∫¨T TH·ªêNG K√ä
function updateProgressStats(total, theory, cabin, practice, test) {
    const statsElement = document.getElementById('progressStats');
    console.log('üîç progressStats element:', statsElement);
    console.log('üìä Stats data to display:', { 
        total: total, 
        theory: theory, 
        cabin: cabin, 
        practice: practice, 
        test: test 
    });
    
    if (statsElement) {
        // ‚úÖ KI·ªÇM TRA N·∫æU C√ì D·ªÆ LI·ªÜU TH·ªêNG K√ä
        if (total > 0) {
            const htmlContent = ` 
                LT: <strong>${theory}/${total}</strong> ‚Ä¢ 
                Cabin: <strong>${cabin}/${total}</strong> ‚Ä¢ 
                TH: <strong>${practice}/${total}</strong> ‚Ä¢ 
                KT: <strong>${test}/${total}</strong>
            `;
            statsElement.innerHTML = htmlContent;
            console.log('‚úÖ Stats displayed:', htmlContent);
        } else {
            statsElement.innerHTML = '- Ch·ªçn kh√≥a h·ªçc ƒë·ªÉ xem th·ªëng k√™';
            console.log('‚ÑπÔ∏è No students, showing default message');
        }
    } else {
        console.error('‚ùå progressStats element not found!');
        // ‚úÖ TH·ª¨ T√åM L·∫†I ELEMENT
        const retryElement = document.getElementById('progressStats');
        console.log('üîç Retry finding progressStats:', retryElement);
    }
}

window.clearStudentsTable = function() {
    const tbody = document.getElementById('studentsTableBody');
    if (tbody) {
        tbody.innerHTML = `
            <tr>
                <td colspan="20">
                    <div class="empty-state">
                        <div class="empty-icon">üìù</div>
                        <div class="empty-text">Ch·ªçn kh√≥a h·ªçc ƒë·ªÉ xem danh s√°ch h·ªçc vi√™n</div>
                        <div class="empty-subtext">Danh s√°ch h·ªçc vi√™n s·∫Ω t·ª± ƒë·ªông hi·ªÉn th·ªã</div>
                    </div>
                </td>
            </tr>
        `;
        updateStudentsCount(0);
        // TH√äM D√íNG N√ÄY
        updateProgressStats(0, 0, 0, 0, 0);
    }
};

function showStudentsError(message) {
    GlobalUtils.showError(message);
    
    // Fallback UI update
    const tbody = document.getElementById('studentsTableBody');
    if (tbody) {
        tbody.innerHTML = `
            <tr>
                <td colspan="20">
                    <div class="empty-state">
                        <div class="empty-icon">üö´</div>
                        <div class="empty-text" style="color: #e74c3c;">${message}</div>
                        <div class="empty-subtext">Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n</div>
                    </div>
                </td>
            </tr>
        `;
    }
}


//function updateStudentsCount(count) {
    //GlobalUtils.updateStudentsCount(count);
//}

// ==================== NEW STANDARDS COMPLIANCE CHECK ====================
async function checkNewStandardCompliance(student, maHang) {
    try {
        if (!student) {
            console.log('‚ùå Student is undefined');
            return { 
                violations: {}, 
                completedSections: {
                    theory: false,
                    cabin: false,
                    practice: false,
                    test: false
                }
            };
        }

        const standards = await getNewStandardsByMaHang(maHang);
        if (!standards) {
            console.log(`‚ùå No standards found for ${maHang}`);
            return { 
                violations: {}, 
                completedSections: {
                    theory: false,
                    cabin: false,
                    practice: false,
                    test: false
                }
            };
        }
        
        const violations = {};
        let completedSections = {
            theory: true,  // M·∫∑c ƒë·ªãnh l√† true, s·∫Ω set false n·∫øu vi ph·∫°m
            cabin: true,
            practice: true,
            test: true
        };
        
        console.log(`üîç Checking compliance for ${student.ma_dk} with ${maHang} standards`);

        // ‚úÖ KI·ªÇM TRA L√ù THUY·∫æT
        if (standards.ly_thuyet) {
            Object.keys(standards.ly_thuyet).forEach(key => {
                const standard = standards.ly_thuyet[key];
                if (standard.required && standard.min > 0) {
                    const studentValue = parseFloat(student[key] || student[key] || 0);
                    console.log(`üìä ${key}: Student=${studentValue}%, Standard=${standard.min}%`);
                    if (studentValue < standard.min) {
                        violations[key] = true;
                        completedSections.theory = false;
                        console.log(`‚ùå ${key} NOT MET: ${studentValue}% < ${standard.min}%`);
                    }
                }
            });
        }

        // ‚úÖ KI·ªÇM TRA CABIN
        if (standards.cabin) {
            Object.keys(standards.cabin).forEach(key => {
                const standard = standards.cabin[key];
                if (standard.required && standard.min > 0) {
                    const fieldName = `cabin_${key}`;
                    const studentValue = parseFloat(student[fieldName] || 0);
                    console.log(`üìä ${fieldName}: Student=${studentValue}, Standard=${standard.min}`);
                    if (studentValue < standard.min) {
                        violations[fieldName] = true;
                        completedSections.cabin = false;
                        console.log(`‚ùå ${fieldName} NOT MET: ${studentValue} < ${standard.min}`);
                    }
                }
            });
        }

        // ‚úÖ KI·ªÇM TRA TH·ª∞C H√ÄNH
        if (standards.thuc_hanh) {
            const outdoor_hour = student.outdoor_hour ? (student.outdoor_hour / 3600) : 0;
            const outdoor_distance = student.outdoor_distance ? (student.outdoor_distance / 1000) : 0;
            const night_duration = student.night_duration ? (student.night_duration / 3600) : 0;
            const auto_duration = student.auto_duration ? (student.auto_duration / 3600) : 0;

            const thucHanhMapping = {
                'gio': { value: outdoor_hour, field: 'outdoor_hour' },
                'km': { value: outdoor_distance, field: 'outdoor_distance' },
                'dem': { value: night_duration, field: 'night_duration' },
                'tu_dong': { value: auto_duration, field: 'auto_duration' }
            };

            Object.keys(standards.thuc_hanh).forEach(key => {
                const standard = standards.thuc_hanh[key];
                if (standard.required && standard.min > 0) {
                    const mapping = thucHanhMapping[key];
                    if (mapping) {
                        console.log(`üìä ${mapping.field}: Student=${mapping.value}, Standard=${standard.min}`);
                        if (mapping.value < standard.min) {
                            violations[mapping.field] = true;
                            completedSections.practice = false;
                            console.log(`‚ùå ${mapping.field} NOT MET: ${mapping.value} < ${standard.min}`);
                        }
                    }
                }
            });
        }

        // ‚úÖ KI·ªÇM TRA ƒêI·ªÇM KI·ªÇM TRA
        if (standards.kiem_tra) {
            Object.keys(standards.kiem_tra).forEach(key => {
                const standard = standards.kiem_tra[key];
                if (standard.required && standard.min > 0) {
                    const fieldName = `kt_${key}`;
                    const studentValue = parseFloat(student[fieldName] || 0);
                    console.log(`üìä ${fieldName}: Student=${studentValue}, Standard=${standard.min}`);
                    if (studentValue < standard.min) {
                        violations[fieldName] = true;
                        completedSections.test = false;
                        console.log(`‚ùå ${fieldName} NOT MET: ${studentValue} < ${standard.min}`);
                    }
                }
            });
        }

        console.log(`üéØ Final compliance for ${student.ma_dk}:`, { violations, completedSections });
        return { violations, completedSections };

    } catch (error) {
        console.error('üí• Error in checkNewStandardCompliance:', error);
        return { 
            violations: {}, 
            completedSections: {
                theory: false,
                cabin: false,
                practice: false,
                test: false
            }
        };
    }
}

// H√ÄM L·∫§Y STANDARDS T·ª™ DATABASE - S·ª¨A ENDPOINT
async function getNewStandardsByMaHang(maHang) {
    try {
        console.log(`üìã Loading standards from DB for: ${maHang}`);
        
        if (!maHang) {
            console.log('‚ùå No maHang provided for standards');
            return null;
        }
        
        // ‚úÖ S·ª¨A ENDPOINT: standards-new thay v√¨ standards
        const response = await fetch(`/api/standards-new/${maHang}`);
        if (response.ok) {
            const result = await response.json();
            if (result.success) {
                console.log(`‚úÖ Loaded standards for ${maHang} from DB:`, result.standards);
                return result.standards;
            } else {
                console.log(`‚ùå API returned error: ${result.error}`);
                return null;
            }
        } else {
            console.log(`‚ùå Failed to load standards for ${maHang} from DB`);
            return null;
        }
    } catch (error) {
        console.error(`üí• Error loading standards for ${maHang} from DB:`, error);
        return null;
    }
}

// H√ÄM PH·ª§ TR·ª¢: L·∫•y m√£ h·∫°ng t·ª´ courseId (n·∫øu c·∫ßn)
function getMaHangFromCourseId(courseId) {
    // Logic ƒë·ªÉ extract m√£ h·∫°ng t·ª´ courseId
    // V√≠ d·ª•: courseId = "B2_K12" -> m√£ h·∫°ng = "B2"
    const match = courseId.match(/^([A-Z]\d+)/);
    return match ? match[1] : null;
}

// ‚úÖ FUNCTION AN TO√ÄN ƒê·ªÇ X·ª¨ L√ù EXPORT BUTTON - ƒê√É S·ª¨A
function enableExportButton() {
    console.log('üîÑ Enabling export button...');
    const exportBtn = document.getElementById('exportExcelBtn');
    if (exportBtn) {
        exportBtn.disabled = false;
        console.log('‚úÖ Export button enabled');
    } else {
        console.error('‚ùå Export button not found in DOM');
    }
}

function disableExportButton() {
    console.log('üîÑ Disabling export button...');
    const exportBtn = document.getElementById('exportExcelBtn');
    if (exportBtn) {
        exportBtn.disabled = true;
        console.log('‚úÖ Export button disabled');
    }
}

// ‚úÖ KH·ªûI T·∫†O EXPORT BUTTON KHI TRANG LOAD
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéØ Initializing export button...');
    const exportBtn = document.getElementById('exportExcelBtn');
    if (exportBtn) {
        console.log('‚úÖ Export button found in DOM');
        // ƒê·∫£m b·∫£o n√∫t b·ªã disabled ban ƒë·∫ßu
        exportBtn.disabled = true;
        
        // Th√™m event listener n·∫øu ch∆∞a c√≥
        exportBtn.addEventListener('click', function() {
            if (window.excelExport && !exportBtn.disabled) {
                window.excelExport.exportToExcel();
            }
        });
    } else {
        console.error('‚ùå Export button NOT FOUND in DOM');
    }
});
// ==================== EXCEL IMPORT INTEGRATION ====================

window.handleScoresImport = async function(importedData) {
    try {
        console.log('üì• Processing imported scores data:', importedData);
        
        if (!importedData || !Array.isArray(importedData.rows)) {
            throw new Error('D·ªØ li·ªáu import kh√¥ng h·ª£p l·ªá');
        }
        
        // TODO: X·ª≠ l√Ω v√† l∆∞u d·ªØ li·ªáu ƒëi·ªÉm s·ªë
        const result = await this.saveImportedScores(importedData.rows);
        
        // Reload students data ƒë·ªÉ hi·ªÉn th·ªã ƒëi·ªÉm m·ªõi
        if (window.currentCourseData) {
            await window.loadStudentsForCourse(window.currentCourseData.id, window.currentCourseData);
        }
        
        return result;
        
    } catch (error) {
        console.error('‚ùå Error processing imported scores:', error);
        throw error;
    }
};

window.saveImportedScores = async function(scoresData) {
    // TODO: G·ªçi API ƒë·ªÉ l∆∞u ƒëi·ªÉm v√†o database
    console.log('üíæ Saving imported scores to database:', scoresData);
    
    // T·∫°m th·ªùi tr·∫£ v·ªÅ mock data
    return { success: true, message: `ƒê√£ x·ª≠ l√Ω ${scoresData.length} b·∫£n ghi` };
};

// ==================== CARD VIEW INTEGRATION ====================

// H√†m t·∫°o card HTML cho mobile
async function createStudentCardHTML(student, index, maHang = null) {
    const so_tt = student.so_tt || index + 1;
    const ma_dk = (student.ma_dk || `hv${String(index + 1).padStart(3, '0')}`).toLowerCase();
    
    let ho_va_ten = student.ho_va_ten || 'N/A';
    
    // ‚úÖ L·∫§Y STANDARDS ƒê·ªÇ KI·ªÇM TRA M√îN N√ÄO KH√îNG √ÅP D·ª§NG
    const standards = maHang ? await getNewStandardsByMaHang(maHang) : null;
    const complianceResult = window.studentComplianceResults?.[student.ma_dk] || { violations: {}, completedSections: {} };
    const violations = complianceResult.violations;
    const completed = complianceResult.completedSections || {};
    
    // Data t·ª´ JIRA (th·ª±c h√†nh) - convert to hours/km
    const outdoor_hour = student.outdoor_hour ? (student.outdoor_hour / 3600).toFixed(2) : '0';
    const outdoor_distance = student.outdoor_distance ? (student.outdoor_distance / 1000).toFixed(2) : '0';
    const night_duration = student.night_duration ? (student.night_duration / 3600).toFixed(2) : '0';
    const auto_duration = student.auto_duration ? (student.auto_duration / 3600).toFixed(2) : '0';
    
    // Data t·ª´ LMS Excel (l√Ω thuy·∫øt)
    const phap_luat = student.phap_luat || student['Ph√°p lu·∫≠t giao th√¥ng ƒë∆∞·ªùng b·ªô'] || 0;
    const dao_duc = student.dao_duc || student['ƒê·∫°o ƒë·ª©c ng∆∞·ªùi l√°i xe'] || 0;
    const cau_tao_oto = student.cau_tao_oto || student['C·∫•u t·∫°o v√† s·ª≠a ch·ªØa'] || 0;
    const ky_thuat_lai = student.ky_thuat_lai || student['K·ªπ thu·∫≠t l√°i xe'] || 0;
    const nang_hang = student.nang_hang || student['N√¢ng h·∫°ng'] || 0;
    const mo_phong = student.mo_phong || student['M√¥ ph·ªèng'] || 0;
    
    // Data t·ª´ Scores Import (Cabin & Ki·ªÉm tra)
    const cabin_gio = student.cabin_gio || 0;
    const cabin_bai = student.cabin_bai || 0;
    const kt_lythuyet = student.kt_lythuyet || 0;
    const kt_mophong = student.kt_mophong || 0;
    const kt_thuchanh = student.kt_thuchanh || 0;
    const kt_hoanthanh = student.kt_hoanthanh || 'Ch∆∞a';
    
    // Status badge
    const allCompleted = completed.theory && completed.cabin && completed.practice && completed.test;
    const statusBadge = allCompleted ? 'completion-badge' : 'progress-badge';
    const statusText = allCompleted ? '‚úÖ Ho√†n th√†nh' : 'üìö ƒêang h·ªçc';
    
    // ‚úÖ FUNCTION T·∫†O DATA ITEM M·ªöI - X·ª¨ L√ù M√îN KH√îNG √ÅP D·ª§NG
    const createDataItem = (label, value, fieldName = null, isPercent = false) => {
        // Ki·ªÉm tra n·∫øu m√¥n kh√¥ng √°p d·ª•ng (required: false)
        const isNotApplicable = standards && fieldName && 
                               getFieldStandard(standards, fieldName)?.required === false;
        
        if (isNotApplicable) {
            return `<div class="data-item">
                <span class="data-label">${label}</span>
                <span class="data-value" style="color: #6c757d; font-style: italic;">N/A</span>
            </div>`;
        }
        
        const isViolation = violations[fieldName];
        const valueStyle = isViolation ? 'style="color: #e74c3c; font-weight: bold;"' : '';
        const displayValue = isPercent ? `${value}%` : value;
        
        return `<div class="data-item">
            <span class="data-label">${label}</span>
            <span class="data-value" ${valueStyle}>${displayValue}</span>
        </div>`;
    };

    // ‚úÖ FUNCTION PH·ª§ ƒê·ªÇ L·∫§Y STANDARD THEO FIELD NAME
    const getFieldStandard = (standards, fieldName) => {
        if (fieldName.startsWith('cabin_')) {
            const key = fieldName.replace('cabin_', '');
            return standards.cabin?.[key];
        } else if (fieldName.startsWith('kt_')) {
            const key = fieldName.replace('kt_', '');
            return standards.kiem_tra?.[key];
        } else if (['outdoor_hour', 'outdoor_distance', 'night_duration', 'auto_duration'].includes(fieldName)) {
            const mapping = {
                'outdoor_hour': 'gio',
                'outdoor_distance': 'km', 
                'night_duration': 'dem',
                'auto_duration': 'tu_dong'
            };
            return standards.thuc_hanh?.[mapping[fieldName]];
        } else {
            return standards.ly_thuyet?.[fieldName];
        }
    };
    
    return `
        <div class="card-header">
            <div class="student-info">
                <div class="student-name">${so_tt}. ${ho_va_ten}</div>
            </div>
        </div>
        
        <div class="card-sections">
            <div class="card-section">
                <div class="section-title">üìñ L√Ω thuy·∫øt</div>
                <div class="section-grid">
                    ${createDataItem('Ph√°p lu·∫≠t', phap_luat, 'phap_luat', true)}
                    ${createDataItem('ƒê·∫°o ƒë·ª©c', dao_duc, 'dao_duc', true)}
                    ${createDataItem('C·∫•u t·∫°o oto', cau_tao_oto, 'cau_tao_oto', true)}
                    ${createDataItem('K·ªπ thu·∫≠t l√°i', ky_thuat_lai, 'ky_thuat_lai', true)}
                    ${createDataItem('N√¢ng h·∫°ng', nang_hang, 'nang_hang', true)}
                    ${createDataItem('M√¥ ph·ªèng', mo_phong, 'mo_phong', true)}
                </div>
            </div>
            
            <div class="card-section">
                <div class="section-title">üéÆ Cabin ƒëi·ªán t·ª≠</div>
                <div class="section-grid">
                    ${createDataItem('Gi·ªù h·ªçc', cabin_gio, 'cabin_gio')}
                    ${createDataItem('S·ªë b√†i', cabin_bai, 'cabin_bai')}
                </div>
            </div>
            
            <div class="card-section">
                <div class="section-title">üöó Th·ª±c h√†nh</div>
                <div class="section-grid">
                    ${createDataItem('Th·ªùi gian', outdoor_hour, 'outdoor_hour')}
                    ${createDataItem('Qu√£ng ƒë∆∞·ªùng', outdoor_distance, 'outdoor_distance')}
                    ${createDataItem('Gi·ªù ƒë√™m', night_duration, 'night_duration')}
                    ${createDataItem('Gi·ªù t·ª± ƒë·ªông', auto_duration, 'auto_duration')}
                </div>
            </div>
            
            <div class="card-section">
                <div class="section-title">üìù Ki·ªÉm tra</div>
                <div class="section-grid">
                    ${createDataItem('L√Ω thuy·∫øt', kt_lythuyet, 'kt_lythuyet')}
                    ${createDataItem('M√¥ ph·ªèng', kt_mophong, 'kt_mophong')}
                    ${createDataItem('Th·ª±c h√†nh', kt_thuchanh, 'kt_thuchanh')}
                    <div class="data-item">
                        <span class="data-label">Ho√†n th√†nh</span>
                        <span class="data-value">${kt_hoanthanh}</span>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// H√†m t·∫°o empty state HTML
function getEmptyStateHTML(title, subtitle = '') {
    return `
        <div class="empty-state">
            <div class="empty-icon">${title === 'L·ªói d·ªØ li·ªáu h·ªçc vi√™n' ? 'üö´' : 'üë•'}</div>
            <div class="empty-text">${title}</div>
            ${subtitle ? `<div class="empty-subtext">${subtitle}</div>` : ''}
        </div>
    `;
}

// Toggle gi·ªØa table v√† card view
function toggleTableView() {
    const table = document.getElementById('studentsTable');
    const cardsContainer = document.getElementById('cardsContainer');
    
    if (!table || !cardsContainer) {
        console.error('‚ùå Table or cards container not found');
        return;
    }
    
    const isMobile = window.innerWidth <= 768;
    
    if (isMobile) {
        table.style.display = 'none';
        cardsContainer.style.display = 'block';
    } else {
        table.style.display = 'table';
        cardsContainer.style.display = 'none';
    }
}

// Th√™m event listener cho resize
window.addEventListener('resize', toggleTableView);

// H√†m search h·ªó tr·ª£ c·∫£ table v√† card
function filterStudents(searchTerm) {
    const tbody = document.getElementById('studentsTableBody');
    const cardsContainer = document.getElementById('cardsContainer');
    const rows = tbody.getElementsByTagName('tr');
    const cards = cardsContainer.getElementsByClassName('student-card');
    
    let visibleCount = 0;
    searchTerm = searchTerm.toLowerCase().trim();
    
    // Filter table rows
    for (let row of rows) {
        if (row.cells.length < 3) continue;
        
        const studentName = row.cells[2]?.textContent?.toLowerCase() || '';
        const studentCode = row.cells[1]?.textContent?.toLowerCase() || '';
        const isVisible = studentName.includes(searchTerm) || 
                         studentCode.includes(searchTerm) || 
                         searchTerm === '';
        
        row.style.display = isVisible ? '' : 'none';
        if (isVisible) visibleCount++;
    }
    
    // Filter cards
    for (let card of cards) {
        const studentName = card.querySelector('.student-name')?.textContent?.toLowerCase() || '';
        const studentCode = card.querySelector('.student-code')?.textContent?.toLowerCase() || '';
        const isVisible = studentName.includes(searchTerm) || 
                         studentCode.includes(searchTerm) || 
                         searchTerm === '';
        
        card.style.display = isVisible ? '' : 'none';
        if (isVisible) visibleCount++;
    }
    
    // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng t√¨m th·∫•y
    if (visibleCount === 0 && searchTerm !== '') {
        showNoResultsMessage(searchTerm);
    } else {
        removeNoResultsMessage();
    }
}

function showNoResultsMessage(searchTerm) {
    removeNoResultsMessage();
    
    const tbody = document.getElementById('studentsTableBody');
    const cardsContainer = document.getElementById('cardsContainer');
    
    // Table no results
    const noResultsRow = document.createElement('tr');
    noResultsRow.innerHTML = `
        <td colspan="20">
            <div class="no-results">
                <div>üîç</div>
                <div>Kh√¥ng t√¨m th·∫•y h·ªçc vi√™n n√†o v·ªõi t·ª´ kh√≥a: "${searchTerm}"</div>
            </div>
        </td>
    `;
    tbody.appendChild(noResultsRow);
    
    // Card no results
    const noResultsCard = document.createElement('div');
    noResultsCard.className = 'no-results-card';
    noResultsCard.innerHTML = `
        <div class="no-results">
            <div>üîç</div>
            <div>Kh√¥ng t√¨m th·∫•y h·ªçc vi√™n n√†o v·ªõi t·ª´ kh√≥a: "${searchTerm}"</div>
        </div>
    `;
    cardsContainer.appendChild(noResultsCard);
}

function removeNoResultsMessage() {
    const noResults = document.querySelectorAll('.no-results');
    noResults.forEach(element => {
        element.closest('tr')?.remove();
        element.closest('.no-results-card')?.remove();
    });
}

// Kh·ªüi t·∫°o card view khi trang load
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéØ Initializing card view...');
    setTimeout(() => {
        toggleTableView(); // √Åp d·ª•ng view mode ngay khi load
    }, 100);
});
